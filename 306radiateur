#!/usr/bin/env python3
# coding: utf-8

import math
import sys

#Define var
H = 0.5
#Define var END

def partial_pivot_y(matrix_A, j):
    y = j
    for i in range(j, len(matrix_A)):
        if abs(matrix_A[i][j]) > abs(matrix_A[y][j]):
            y = i
    return y

def transvection(A, Y, i, j, m):
    A[i] = [a + b for a, b in zip(A[i], [x * m for x in A[j]])]
    Y[i] = Y[i] + m * Y[j]

def gauss_matrix(matrix_A, n, ir, jr):
    matrix_F = [0 for x in range(n**2)]
    matrix_Y = [0 for x in range(n**2)]
    matrix_Y[ir * n + jr] = -300
    for i in range(0, len(matrix_A) - 1):
        j = partial_pivot_y(matrix_A, i)
        matrix_A[i],matrix_A[j] = matrix_A[j],matrix_A[i]
        matrix_Y[i],matrix_Y[j] = matrix_Y[j],matrix_Y[i]
        for k in range(i + 1, len(matrix_A)):
            transvection(matrix_A, matrix_Y, k, i, -float(matrix_A[k][i]) / float(matrix_A[i][i]))
    for i in range(len(matrix_A) - 1, -1, -1):
        for k in range(i + 1, len(matrix_A)):
            matrix_Y[i] = matrix_Y[i] - float(matrix_A[i][k]) * matrix_F[k]
        matrix_F[i] = matrix_Y[i] / float(matrix_A[i][i])
    return matrix_F

def print_matrix(matrix):
    for line in matrix:
        sarr = [str(elem) for elem in line]
        print('\t'.join(sarr))
    # for line in matrix:
    #     for elem in line:
    #         if elem != -16:
    #             print(elem,"",end="")
    #         else:
    #             print('\x1b[6;30;42m' + "M" + '\x1b[0m',"",end="")
    #     print()

def set_zero_to_n(matrix, s, t):
    for i in range(s, t):
        matrix[i][i] = 1

def set_np1_to_twonm1(matrix, n, offset_y):
    y = 0
    for i in range(n + 1 + offset_y, 2 * n - 1 + offset_y):
        x = 0
        xn = 0
        point = [1 + y + offset_y, n + y + offset_y, n + y + 1 + offset_y, n + y + 2 + offset_y, 2*n + y + 1 + offset_y]
        coeff = [1, 1, -4, 1, 1]
        for elem in matrix[i]:
            if x in point:
                matrix[i][x] = int((1 / H**2) * (coeff[xn]))
                xn = xn + 1
            x = x + 1
        y = y + 1
    set_zero_to_n(matrix, 2*n - 1 + offset_y, 2*n + 1 + offset_y)
    return y + 2

def set_np1_to_twonm2(matrix, n):
    y = 0
    for i in range(2*n + 1, 3 * n - 1):
        x = 0
        xn = 0
        point = [n + 1 + y, 2*n + y, 2*n + y + 1, 2*n + y + 2, 3*n + y + 1]
        coeff = [1, 1, -4, 1, 1]
        for elem in matrix[i]:
            if x in point:
                matrix[i][x] = int((1 / H**2) * (coeff[xn]))
                xn = xn + 1
            x = x + 1
        y = y + 1

def set_np1_to_twonm3(matrix, n):
    y = 0
    for i in range(n**2-n+1 - n, n**2-1 - n):
        x = 0
        xn = 0
        point = [n**2-3*n+1+y, n**2-2*n+y, n**2-2*n+1+y, n**2-2*n+2+y, n**2-n+1+y]
        coeff = [1, 1, -4, 1, 1]
        for elem in matrix[i]:
            if x in point:
                matrix[i][x] = int((1 / H**2) * (coeff[xn]))
                xn = xn + 1
            x = x + 1
        y = y + 1

def create_matrix(n):
    matrix = [[0 for x in range(n**2)] for y in range(n**2)]
    set_zero_to_n(matrix, 0, n + 1)
    offset_y = 0
    while offset_y + n < n**2-n+1 - n:
        offset_y = offset_y + set_np1_to_twonm1(matrix, n, offset_y)
    set_np1_to_twonm3(matrix, n)
    set_zero_to_n(matrix, n**2-1 - n, n**2)
    return matrix

def option_one(n, ir, jr):
    matrix_A = create_matrix(n)
    print_matrix(matrix_A)
    print()
    matrix_F = gauss_matrix(matrix_A, n, ir, jr)
    for elem in matrix_F:
        print(round(elem + 0.01, 1))

def option_two(n, ir, jr, i, j):
    matrix_A = create_matrix(n)
    matrix_F = gauss_matrix(matrix_A, n, ir, jr)
    print(round(matrix_F[n * i + j], 1))
    
def main(argv):
    if (len(argv) < 4 or len(argv) > 6):
        exit(84)
    try:
        n = int(argv[1])
        ir = int(argv[2])
        jr = int(argv[3])
        if len(argv) == 4:
            option_one(n, ir, jr)
        if len(argv) == 6:
            i = int(argv[4])
            j = int(argv[5])
            option_two(n, ir, jr, i, j)
    except:
        exit(84)


## main
main(sys.argv)
## main end